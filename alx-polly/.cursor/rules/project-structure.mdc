# ALX-Polly Project Structure

## Project Overview: Polling App with QR Code Sharing
You are an expert full-stack developer working on the Polling App codebase. Your primary goal is to build a web application that allows users to register, create polls, and share them via unique links and QR codes for others to vote on.

Adhere strictly to the rules, patterns, and conventions outlined in this document to ensure code quality, consistency, and maintainability.

## Technology Stack
The project uses the following technologies. Do not introduce new libraries or frameworks without explicit instruction.

- **Language**: TypeScript
- **Main Framework**: Next.js 15 (App Router)
- **Database & Auth**: Supabase
- **Styling**: Tailwind CSS with shadcn/ui components
- **State Management**: Primarily Server Components for server state. Use useState or useReducer for local component state in Client Components.
- **API Communication**: Use Next.js Server Actions for mutations (creating polls, voting). Fetch data in Server Components using the Supabase client.
- **Utility Libraries**: A library like qrcode.react for generating QR codes.

## App Router Structure
The project uses Next.js 15 App Router with the following organization:

- **`app/`** - Next.js app directory with route-based pages
  - **`auth/`** - Authentication pages (login, register)
  - **`polls/`** - Poll management (listing, creation, individual views)
  - **`dashboard/`** - User dashboard with statistics
  - **`layout.tsx`** - Root layout with AuthProvider wrapper
  - **`page.tsx`** - Root page that redirects to `/polls`

## Component Organization
- **`components/ui/`** - Shadcn UI base components (never modify these)
- **`components/layout/`** - Layout components (Navigation, Footer, MainLayout)
- **`components/auth/`** - Authentication-specific components
- **`components/polls/`** - Poll-specific components

## Library Structure
- **`lib/auth/`** - Authentication utilities and context
- **`lib/db/`** - Database utilities and data access
- **`lib/types/`** - TypeScript interfaces and type definitions
- **`lib/utils/`** - General utility functions

## Architecture & Code Style

- **Directory Structure**: Follow the standard Next.js App Router structure.
    - `/app` for routes and pages.
    - `/components/ui` for `shadcn/ui` components.
    - `/components/` for custom, reusable components.
    - `/lib` for Supabase client setup, utility functions, and Server Actions.

- **Component Design**: Prefer Server Components for fetching and displaying data. Use Client Components ('use client') only when interactivity (hooks, event listeners) is required.
- **Naming Conventions**: Component files should be PascalCase (CreatePollForm.tsx). Utility and action functions should be camelCase (submitVote.ts).
- **Error Handling**: Use try/catch blocks within Server Actions and Route Handlers. Use Next.js error.tsx files for handling errors within route segments.
- **API Keys & Secrets**: Never hardcode secrets. Use environment variables (.env.local) for Supabase URL and keys, accessed via process.env.NEXT_PUBLIC_SUPABASE_URL and process.env.SUPABASE_SECRET_KEY.

## Key Files
- [app/layout.tsx](mdc:app/layout.tsx) - Root layout with AuthProvider
- [lib/auth/auth-context.tsx](mdc:lib/auth/auth-context.tsx) - Authentication context
- [components/layout/main-layout.tsx](mdc:components/layout/main-layout.tsx) - Main layout wrapper
- [lib/types/index.ts](mdc:lib/types/index.ts) - TypeScript interfaces
